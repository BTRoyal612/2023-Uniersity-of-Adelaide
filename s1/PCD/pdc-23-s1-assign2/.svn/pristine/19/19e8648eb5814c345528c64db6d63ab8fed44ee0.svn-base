/*
 * This program initialize an array of size 1000 and calculate the sum of the array, sequentially and parallelize.
 * 
 * Author: Gia Bao Hoang
 * Title: PDC-23-S1-ASSIGN2-PART2
 * Created: 07/05/2023
 */ 
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define ARRAY_SIZE 1000

int main(int argc, char *argv[]) {
    int arr[ARRAY_SIZE];
    int sequential_sum = 0;
    int parallel_sum = 0;

    // Get number of threads from command line
    int thread_count = strtol(argv[1], NULL, 10);

    // Step 1: Initialize the array sequentially
    // Iterate through the array and assign the index value to each element
    for (int i = 0; i < ARRAY_SIZE; i++) {
        arr[i] = i;
    }

    // Step 2: Write a sequential for loop to sum the elements of the array, and print the sum
    // Iterate through the array and add the value of each element to the 'sequential_sum' variable
    for (int i = 0; i < ARRAY_SIZE; i++) {
        sequential_sum += arr[i];
    }
    printf("Sequential sum: %d\n", sequential_sum);

    // Step 3: Write a parallel for loop to initialize the array
    // The 'omp parallel for' directive is used to parallelize the initialization of the array
    // The loop iterations will be divided among the available threads
    #pragma omp parallel for num_threads(thread_count)
    for (int i = 0; i < ARRAY_SIZE; i++) {
        arr[i] = i;
    }

    // Step 4: Parallelize the summation loop using a parallel directive and a reduction clause
    // The 'omp parallel for' directive is used to parallelize the summation loop
    // The 'reduction' clause is used to combine the partial sums computed by each thread
    // into the 'parallel_sum' variable
    #pragma omp parallel for num_threads(thread_count) \
        reduction(+:parallel_sum)
    for (int i = 0; i < ARRAY_SIZE; i++) {
        parallel_sum += arr[i];
    }
    printf("Parallel sum: %d\n", parallel_sum);

    return 0;
}

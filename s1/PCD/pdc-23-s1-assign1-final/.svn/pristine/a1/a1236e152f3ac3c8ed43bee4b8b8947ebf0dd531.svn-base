// Author: Gia Bao Hoang
// Title: PDC-23-S1-ASSIGN1
// Version: 0.0

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <time.h>

int main()
{
	// Initialize the MPI environment
	MPI_Init(NULL, NULL);

	// Find out rank, size
	int world_rank, world_size;
	MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);

	// Set the seed for the random number generator
	srand(time(NULL) + world_rank*10);

	// Set m value, define left and right task
	int m = rand() % 11 + 10;
	int right = (world_rank + 1) % world_size;
	int left = (world_rank - 1 + world_size) % world_size;

	printf("Task %d | m %d | left %d | right %d.\n", world_rank, m, left, right);
	
	// For loop to shift to the left based on the shift variable
	int shift = 3;
	for (int i = 0; i < shift; i++) 
	{
		MPI_Send(&m, 1, MPI_INT, left, 0, MPI_COMM_WORLD);
		printf("Task %d sending number %d to task %d.\n", world_rank, m, left);

		MPI_Recv(&m, 1, MPI_INT, right, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		printf("Task %d received number %d from task %d.\n", world_rank, m, right);
	}

	// Task 0 as master to ouput in order
	int master = 0;
	if (world_rank == master) 
	{
		printf("Final m-values after left circular shift:\n");
		for (int i = 0; i < world_size; i++) {
			if (i == 0) {
				printf("Task %d: %d\n", i, m);
			} else {
				int m_received;
				MPI_Recv(&m_received, 1, MPI_INT, i, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
				printf("Task %d: %d\n", i, m_received);
			}
		}
	} else {
		MPI_Send(&m, 1, MPI_INT, master, 1, MPI_COMM_WORLD);
	}
	
	MPI_Finalize();
	return 0;
}
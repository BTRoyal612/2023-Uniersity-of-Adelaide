y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
return (y_bar-x_bar*B1)
}
estimate_test_statistic <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Syy = 0
for (i in (1:x_len)) {
Syy = Syy + (y[i] - y_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
n = x_len
Se_2 = (1/(n-2))*(Syy-B1^2*Sxx)
t = (B1)/(sqrt(Se_2/Sxx))
return (t)
}
estimate_p_value <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Syy = 0
for (i in (1:x_len)) {
Syy = Syy + (y[i] - y_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
n = x_len
Se_2 = (1/(n-2))*(Syy-B1^2*Sxx)
t = (B1)/(sqrt(Se_2/Sxx))
p = pt(t, n-2)
return (p)
}
x <- c(-2,-1,0,1,2)
y <- c(-5.0, -2.1, 1.0, 4.0, 6.9)
estimateB1 <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
return (Sxy/Sxx)
}
estimateB0 <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
return (y_bar-x_bar*B1)
}
estimate_test_statistic <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Syy = 0
for (i in (1:x_len)) {
Syy = Syy + (y[i] - y_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
n = x_len
Se_2 = (1/(n-2))*(Syy-B1^2*Sxx)
t = (B1)/(sqrt(Se_2/Sxx))
return (t)
}
estimate_p_value <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Syy = 0
for (i in (1:x_len)) {
Syy = Syy + (y[i] - y_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
n = x_len
Se_2 = (1/(n-2))*(Syy-B1^2*Sxx)
t = (B1)/(sqrt(Se_2/Sxx))
p = pt(t, n-2)
return (p)
}
x <- c(-2,-1,0,1,2)
y <- c(-5.0, -2.1, 1.0, 4.0, 6.9)
estimateB1 <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
return (Sxy/Sxx)
}
estimateB0 <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
return (y_bar-x_bar*B1)
}
estimate_test_statistic <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Syy = 0
for (i in (1:x_len)) {
Syy = Syy + (y[i] - y_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
n = x_len
Se_2 = (1/(n-2))*(Syy-B1^2*Sxx)
t = (B1)/(sqrt(Se_2/Sxx))
return (t)
}
estimate_p_value <- function(x, y) {
x_bar = 0
x_len = length(x)
for (tempx in x){
x_bar = x_bar + tempx
}
x_bar = x_bar/x_len
y_bar = 0
y_len = length(y)
for (tempy in y){
y_bar = y_bar + tempy
}
y_bar = y_bar/y_len
Sxx = 0
for (i in (1:x_len)) {
Sxx = Sxx + (x[i] - x_bar)^2
}
Syy = 0
for (i in (1:x_len)) {
Syy = Syy + (y[i] - y_bar)^2
}
Sxy = 0
for (i in (1:x_len)) {
Sxy = Sxy + (x[i] - x_bar)*(y[i] - y_bar)
}
B1 = Sxy/Sxx
n = x_len
Se_2 = (1/(n-2))*(Syy-B1^2*Sxx)
t = (B1)/(sqrt(Se_2/Sxx))
p = pt(t, n-2)
return (p)
}
estimateB0(x, y)
estimateB1(x, y)
estimate_test_statistic(x,y)
estimate_p_value(x,y)
25.9244-2.6224*4.7
pf(0.05,2,49,lower.tail = FALSE)
25.6275-2.5457*1.8
pf(0.05,2,12,lower.tail = FALSE)
pf(0.05,2,12,lower.tail = TRUE)
qf(0.05,2,12,lower.tail = FALSE)
26.1005 - 2.6824*5.9
qf(0.05,2,49,lower.tail = FALSE)
61.83*0.00009825
8.423*0.0002897
y <- c(0.1, 0.2, 0.3, 0.5, 0.6, 0.1, 0.2, 0.2, 0.3, 0.2)
n <- length(y)
y
n
lambda <- 1 / mean(y)
lambda
mean(y)
version()
R.version
knitr::opts_chunk$set(
echo = TRUE,
fig.width = 6,
fig.asp = 0.618,
out.width = "70%",
fig.align = "center",
root.dir = "../"
)
install.packages("knitr")
install.packages("pacman")
install.packages("gglm")
install.packages("tidyverse")
knitr::opts_chunk$set(
echo = TRUE,
fig.width = 6,
fig.asp = 0.618,
out.width = "70%",
fig.align = "center",
root.dir = "../"
)
pacman::p_load(tidyverse, gglm)
data(Rubber, package = "MASS")
Rubber
ggplot(Rubber,
aes(hard, loss)
) +
geom_point()
ggplot(Rubber,
aes(tens, loss)
) +
geom_point()
Rubber %>%
pivot_longer(-loss) %>%
ggplot(aes(value, loss)) +
geom_point() +
facet_wrap(~name, scales = "free") +
geom_smooth(method = lm)
rubber_lm <- lm(loss ~ hard + tens, data = Rubber)
summary(rubber_lm)
gglm(rubber_lm)
n_points <- tibble(
hard = c(50, 65),
tens = c(200, 190)
)
n_points
predict(rubber_lm)
predict(rubber_lm, newdata = n_points)
setwd("D:/2023-University-of-Adelaide/s1/SM/week1")
?predict
predict(rubber_lm, newdata = new_pts, interval = "confidence")
n_pts <- tibble(
hard = c(50, 65),
tens = c(200, 190)
)
n_pts
predict(rubber_lm, newdata = n_pts, interval = "confidence")
predict(rubber_lm, newdata = n_pts, interval = "prediction")
rubber_mtrx <- model.matrix(rubber_lm)
rubber_mtrx
Y <- Rubber&loss
data(Rubber, package = "MASS")
Rubber
Y <- Rubber&loss
Y <- Rubber$loss
Y
?t
x <- model.matrix(rubber_lm)
x
?solve
?%8%
?%*%
?solve
beta_hat <- solve(t(x) %*% X) %*% t(x) %*% Y
beta_hat <- solve(t(x) %*% x) %*% t(x) %*% Y
beta_hat
eta_hat <- x %*% beta_hat
eta_hat
n <- nrow(Rubber)
se <- sqrt(sum((Y - eta)^2) / (n - 3))
eta <- x %*% beta_hat
eta
n <- nrow(Rubber)
se <- sqrt(sum((Y - eta)^2) / (n - 3))
se
vcov(rubber_lm)
res <- solve(t(x) %*% x) %*% se
vcov(rubber_lm)
res <- solve(t(x) %*% x) * se^2
vcov(rubber_lm)
res <- solve(t(x) %*% x) * se^2
vcov(rubber_lm)
res <- solve(t(x) %*% x) * se^2
vcov(rubber_lm)
res <- solve(t(x) %*% x) * se^2
se
vcov(rubber_lm)
res <- solve(t(x) %*% x) * se^2
res
gc()
knitr::opts_chunk$set(
echo = TRUE,
fig.width = 6,
fig.asp = 0.618,
out.width = "70%",
fig.align = "center",
root.dir = "../"
)
pacman::p_load(tidyverse, gglm)
data(Rubber, package = "MASS")
Rubber
ggplot(Rubber,
aes(hard, loss)
) +
geom_point()
ggplot(Rubber,
aes(tens, loss)
) +
geom_point()
Rubber %>%
pivot_longer(-loss) %>%
ggplot(aes(value, loss)) +
geom_point() +
facet_wrap(~name, scales = "free") +
geom_smooth(method = lm)
rubber_lm <- lm(loss ~ hard + tens, data = Rubber)
summary(rubber_lm)
gglm(rubber_lm)
n_pts <- tibble(
hard = c(50, 65),
tens = c(200, 190)
)
n_pts
predict(rubber_lm)
predict(rubber_lm, newdata = n_points)
knitr::opts_chunk$set(
echo = TRUE,
fig.width = 6,
fig.asp = 0.618,
out.width = "70%",
fig.align = "center",
root.dir = "../"
)
pacman::p_load(tidyverse, gglm)
data(Rubber, package = "MASS")
Rubber
ggplot(Rubber,
aes(hard, loss)
) +
geom_point()
ggplot(Rubber,
aes(tens, loss)
) +
geom_point()
Rubber %>%
pivot_longer(-loss) %>%
ggplot(aes(value, loss)) +
geom_point() +
facet_wrap(~name, scales = "free") +
geom_smooth(method = lm)
rubber_lm <- lm(loss ~ hard + tens, data = Rubber)
summary(rubber_lm)
gglm(rubber_lm)
n_pts <- tibble(
hard = c(50, 65),
tens = c(200, 190)
)
n_pts
predict(rubber_lm)
predict(rubber_lm, newdata = n_pts)
predict(rubber_lm, newdata = n_pts, interval = "confidence")
predict(rubber_lm, newdata = n_pts, interval = "prediction")
x <- model.matrix(rubber_lm)
x
Y <- Rubber$loss
Y
beta_hat <- solve(t(x) %*% x) %*% t(x) %*% Y
beta_hat
eta <- x %*% beta_hat
eta
n <- nrow(Rubber)
se <- sqrt(sum((Y - eta)^2) / (n - 3))
se
vcov(rubber_lm)
res <- solve(t(x) %*% x) * se^2
res
